#include "../.stdlib/stdlib.js"
#include "lib/rules.js"

// Run this script on any Adobe app to generate resources in form of JavaScript sources.
// Newly generated files by ExtendScript are CRLF,
// They need to be manually converted to LF or the installers will misbehave

var PATH_CURRENT = new File($.fileName).path
var PATH_ROOT = new File(PATH_CURRENT + "/..")
var COMMENT_PSD = "/*\n<javascriptresource>\n<menu>hide</menu>\n</javascriptresource>\n*/\n\n"
var COMMENT_ALL = "// Generated by `codegen/generate.jsx`, do not directly modify this file!\n\n"

// stdlib
var stringsInputFile = new File(PATH_CURRENT + "/strings.csv")
var pluralsInputFile
var outputFile = new File(App.PATH_STDLIB + "/resources/strings.js")
var output = ""
forEachLine(stringsInputFile, function(key, languages, values, isLast) {
  output += "  %s: { %s }".format(key, getContent(languages, values))
  output += !isLast ? ",\n" : "\n"
})
overwrite(outputFile, COMMENT_PSD + COMMENT_ALL + "R.string = {\n%s}\n".format(output))

// Illustrator
stringsInputFile = new File(PATH_CURRENT + "/strings_ai.csv")
pluralsInputFile = new File(PATH_CURRENT + "/plurals_ai.csv")
outputFile = new File(PATH_ROOT + "/Illustrator Scripts/.lib/core-resources.js")
output = ""
forEachLine(stringsInputFile, function(key, languages, values) {
  output += "R.string.%s = { %s }\n".format(key, getContent(languages, values))
})
output += "\n"
forEachLine(pluralsInputFile, function(key, languages, values) {
  var singleValues = [], pluralValues = []
  Collections.forEach(values, function(value, i) {
    value.split(";").run(function(it) {
      singleValues[i] = it[0]
      pluralValues[i] = it[1]
    })
  })
  output += "R.plurals.%s = {\n  single: { %s },\n  plural: { %s } }\n".format(key,
    getContent(languages, singleValues), getContent(languages, pluralValues))
}, true)
overwrite(outputFile, COMMENT_ALL + output)

// Photoshop
stringsInputFile = new File(PATH_CURRENT + "/strings_psd.csv")
outputFile = new File(PATH_ROOT + "/Photoshop Scripts/.lib/core-resources.js")
output = ""
forEachLine(stringsInputFile, function(key, languages, values) {
  output += "R.string.%s = { %s }\n".format(key, getContent(languages, values))
})
overwrite(outputFile, COMMENT_PSD + COMMENT_ALL + output)

// https://stackoverflow.com/a/7431565/1567541
function forEachLine(file, action, disableRules) {
  var lines = file.readText().split(/\r\n|\n/)
  var headers = writeFile(lines, 0)
  for (var i = 1; i < lines.length; i++) {
    var line = writeFile(lines, i)
    var key = line[0]
    var languages = []
    var values = []
    var isLast = i === Collections.lastIndex(lines)
    for (var j = 1; j < headers.length; j++) {
      if (disableRules === undefined || !disableRules) {
        Rules.enforce(key, headers[j], line[j])
      }
      languages.push(headers[j])
      values.push(line[j])
    }
    action(key, languages, values, isLast)
  }
}

function getContent(languages, values) {
  var content = ""
  Collections.forEach(languages, function(language, i) {
    var format = '%s: "%s"'
    if (i < Collections.lastIndex(languages)) { format += ", " }
    content += format.format(language, values[i])
  })
  return content
}

function writeFile(lines, index) {
  var line = lines[index].split('","')
  var lastIndex = line.length - 1
  line[0] = line[0].substring(1)
  line[lastIndex] = line[lastIndex].substring(0, line[lastIndex].length - 1)
  return line
}

function overwrite(file, text) {
  if (file.exists) {
    file.remove()
  }
  file.writeText(text)
}
